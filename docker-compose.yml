version: '2'
services:
  ed-pyspark-jupyter:
    image: jupyter/pyspark-notebook:spark-3.3.0
    user: root
    container_name: ed-pyspark-jupyter-lab
    ports:
      - 8888:8888
      - 4040:4040
    environment:
      JUPYTER_PORT: 8888
      SPARK_UI_PORT: 4040
      GRANT_SUDO: yes
    volumes:
      - streaming_data:/data:rw

  ed-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ed-zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  ed-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ed-kafka
    depends_on:
      - ed-zookeeper
    ports:
      - 9092:9092
    volumes:
      - streaming_data:/data:rw
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ed-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ed-kafka:29092,PLAINTEXT_HOST://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "raw:1:1"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - ed-kafka
    ports:
      - "8081:8081"
    volumes:
      - streaming_data:/data:rw
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'ed-kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 30s
      timeout: 10s
      retries: 5

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - ed-kafka
      - schema-registry
    ports:
      - "9021:9021"
    volumes:
      - streaming_data:/data:rw
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'ed-kafka:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:latest
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["ed-kafka:29092"]
          schemaRegistry:
            enabled: true
            urls: ["http://host.docker.internal:8081"]
    ports:
      - "8080:8080"
    volumes:
      - streaming_data:/data:rw    

  db_postgres:
    image: postgres:14.0
    environment:
      POSTGRES_PASSWORD: cedric
    ports:
      - "5432:5432"
    volumes:
      - streaming_data:/data:rw

  pg_admin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: root@root.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"
    depends_on:
      - db_postgres
    volumes:
      - streaming_data:/data:rw
      
volumes:
  streaming_data:
